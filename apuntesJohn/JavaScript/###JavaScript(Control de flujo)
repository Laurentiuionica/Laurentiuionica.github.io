JavaScript(Control de flujo)

Nos permite indicarle al codigo que camino tomar. Las decisiones se toman dependiendo de los datos que tenemos ( si un usuario es mayor de edad se toma un camino, si no lo es se puede ejecutar otra logica distinta). 

Perfecto t√≠o, vamos con **JavaScript**, el rey del frontend (y tambi√©n se mete en backend el cabr√≥n). Aqu√≠ te explico el **control de flujo en JS**, sin rodeos, con ejemplos y algo de picante üòé.

---

### üîπ `if`, `else if`, `else`

B√°sico. Para tomar decisiones.

```javascript
let edad = 20;

if (edad < 18) {
  console.log("No puedes entrar, chaval√≠n");
} else if (edad < 21) {
  console.log("Puedes entrar, pero sin copas");
} else {
  console.log("Bienvenido al infierno legal üéâ");
}
```

---

### üîπ `switch`

Ideal cuando tienes **muchas opciones**. M√°s limpio que varios `if`.

```javascript
let comando = "jugar";

switch (comando) {
  case "jugar":
    console.log("Empieza la partida");
    break;
  case "salir":
    console.log("Adi√≥s m√°quina");
    break;
  default:
    console.log("No reconozco ese comando, bro");
}
```

---

### üîπ `for`

Para repetir algo un n√∫mero fijo de veces. Lo cl√°sico.

```javascript
for (let i = 0; i < 5; i++) {
  console.log("N√∫mero: " + i);
}
```

---

### üîπ `while`

Mientras se cumpla una condici√≥n‚Ä¶ sigue la fiesta.

```javascript
let x = 0;
while (x < 3) {
  console.log("x vale: " + x);
  x++;
}
```

---

### üîπ `do...while`

Se ejecuta **m√≠nimo una vez**, incluso si la condici√≥n es falsa.

```javascript
let y = 5;
do {
  console.log("Esto se ejecuta al menos una vez");
  y++;
} while (y < 3);
```
En while se evalua primero la condicion, si esta se cumple se ejecuta el codigo de abajo. El do while primero ejecuta el codigo y luego comprueba si la condicion se cumple. Si esta se cumple vuelve a subir y vuelve a ejecutar la porcion de codigo.
---

### üîπ `break`, `continue`

* `break`: corta el bucle.
* `continue`: salta a la siguiente iteraci√≥n.

```javascript
for (let i = 0; i < 10; i++) {
  if (i === 3) continue; // saltamos el 3
  if (i === 7) break;    // nos vamos en el 7
  console.log(i);
}
```

---

### üîπ Extra üî•: operador ternario

Es como un `if` r√°pido en una sola l√≠nea.

```javascript
let permiso = edad >= 18 ? "Puedes entrar" : "Ni lo sue√±es";
console.log(permiso);
```

---

### üß† En resumen:

En JS usas control de flujo **todo el rato**: para men√∫s, validaciones, loops de juego, reacciones del jugador, l√≥gica de IA, etc. Si est√°s haciendo un juego, esto es **el coraz√≥n de tu l√≥gica**. Sin estas estructuras, tu c√≥digo ser√≠a un bloque sin cerebro.

Si me dices qu√© est√°s programando ahora mismo, te tiro un ejemplo real aplicado a tu c√≥digo.
