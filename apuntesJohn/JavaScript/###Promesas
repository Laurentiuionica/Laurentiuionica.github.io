### **🌟 Promesas en JavaScript 🌟**

#### **¿Qué es una Promesa?** 🤔

Una **promesa** es un objeto que representa el **resultado eventual** de una operación **asincrónica**. Imagina que es como un **contrato** que te promete un resultado en el futuro.

**Estados de una Promesa:**

* **Pending**: La promesa está **en espera**.
* **Fulfilled**: La promesa se ha **cumplido** con éxito.
* **Rejected**: La promesa **falló**.

---

#### **¿Cómo se crea una Promesa?** 💥

```javascript
let miPromesa = new Promise((resolve, reject) => {
  let exito = true; // Simulamos éxito

  if (exito) {
    resolve("¡Operación exitosa! 🎉");
  } else {
    reject("¡Hubo un error! ❌");
  }
});
```

---

#### **Manejo de Promesas** 🛠️

* **`.then()`**: Se ejecuta cuando la promesa se **cumple** (estado **fulfilled**).
* **`.catch()`**: Se ejecuta si la promesa **falla** (estado **rejected**).

```javascript
miPromesa
  .then((resultado) => {
    console.log(resultado); // Si se cumple 🎉
  })
  .catch((error) => {
    console.log(error); // Si falla ❌
  });
```

---

### **`async` y `await` para Manejar Promesas** 🚀

1. **`async`** convierte una función en **asincrónica**. ¡Siempre devuelve una **promesa**!
2. **`await`** hace que el código espere hasta que una promesa se resuelva antes de continuar.

---

#### **Ejemplo con `async` y `await`** 👇

```javascript
async function ejemplo() {
  console.log('Inicio de la operación... ⏳');
  
  // Espera 2 segundos simulando una operación asincrónica
  await new Promise((resolve) => setTimeout(resolve, 2000)); 
  
  console.log('Fin de la operación. ¡Listo! 🎉');
}

ejemplo();
```

**Salida**:

```
Inicio de la operación... ⏳
(Fin aparece después de 2 segundos)
Fin de la operación. ¡Listo! 🎉
```

---

#### **Beneficios de `async` y `await`** 💡

* **Código limpio**: Evitas el **callback hell**.
* **Fácil de leer**: El código se ve como si fuera **síncrono**, pero sigue siendo **asincrónico**.
* **Control total** sobre los tiempos de espera.

---

### **Ejemplo Completo con Promesas, `async` y `await`** 👇

```javascript
async function obtenerDatos() {
  console.log('Cargando datos... ⏳');

  // Simulamos una promesa que se resuelve después de 3 segundos
  let promesa = new Promise((resolve) => {
    setTimeout(() => resolve("¡Datos obtenidos con éxito! 📡"), 3000);
  });

  // Usamos `await` para esperar a que la promesa se resuelva
  let resultado = await promesa;

  console.log(resultado); // Después de 3 segundos, muestra el resultado
  console.log('Proceso completado. ✅');
}

obtenerDatos();
```

**Salida**:

```
Cargando datos... ⏳
(Después de 3 segundos...)
¡Datos obtenidos con éxito! 📡
Proceso completado. ✅
```

---

### **¡A dominar Promesas en JavaScript!** 🚀💥


