## üî£ **2. Tipos de Entidades**

### üîπ **Entidades Fuertes (Independientes)**
**Caracter√≠sticas:**  
- Existen por s√≠ mismas  
- Tienen **identificador √∫nico (PK)**  
- No dependen de otras entidades  

**Ejemplo:**  
```sql
CREATE TABLE autores (  -- üìö Entidad fuerte
    id_autor INT PRIMARY KEY,
    nombre VARCHAR(100)
);
```

### üî∏ **Entidades D√©biles (Dependientes)**
**Caracter√≠sticas:**  
- Dependen de una entidad fuerte  
- Su PK suele ser **compuesta** (incluye FK de la entidad fuerte)  

**Ejemplo:**  
```sql
CREATE TABLE libros (  -- üìñ Entidad d√©bil (depende de autores)
    id_libro INT,
    id_autor INT,      -- FK a entidad fuerte
    titulo VARCHAR(200),
    PRIMARY KEY (id_libro, id_autor),
    FOREIGN KEY (id_autor) REFERENCES autores(id_autor)
);
```

## üß© **3. Relaciones Entre Entidades**

### üîó **Tipos de Cardinalidad**
| Tipo | S√≠mbolo | Ejemplo en SQL |
|------|---------|----------------|
| 1:1 (Uno a Uno) | ‚û°Ô∏è | FK con UNIQUE |
| 1:N (Uno a Muchos) | ‚û°Ô∏èüë• | FK sin restricci√≥n |
| N:M (Muchos a Muchos) | üë•‚û°Ô∏èüë• | Tabla intermedia |

**Ejemplo N:M:**  
```sql
-- Tabla intermedia para relaci√≥n N:M entre Estudiantes y Cursos
CREATE TABLE estudiantes_cursos (
    estudiante_id INT,
    curso_id INT,
    fecha_inscripcion DATE,
    PRIMARY KEY (estudiante_id, curso_id),
    FOREIGN KEY (estudiante_id) REFERENCES estudiantes(id),
    FOREIGN KEY (curso_id) REFERENCES cursos(id)
);
```

## üè∑Ô∏è **4. Atributos de Entidades**

### üìå **Tipos de Atributos**
| Tipo | Descripci√≥n | Ejemplo en SQL |
|------|-------------|----------------|
| **Simples** | No divisibles | `nombre VARCHAR(50)` |
| **Compuestos** | Formados por otros | direcci√≥n (calle, ciudad, CP) |
| **Derivados** | Se calculan | `edad` (de `fecha_nacimiento`) |
| **Multivalor** | M√∫ltiples valores | tel√©fonos (se normaliza en tabla aparte) |

**Ejemplo Atributo Multivalor:**  
```sql
CREATE TABLE clientes_telefonos (
    cliente_id INT,
    telefono VARCHAR(15),
    PRIMARY KEY (cliente_id, telefono),
    FOREIGN KEY (cliente_id) REFERENCES clientes(id)
);
```

## üõ†Ô∏è **5. Ejemplo Completo: Sistema Biblioteca**

```sql
-- Entidad Fuerte: Autor
CREATE TABLE autores (
    id_autor INT AUTO_INCREMENT PRIMARY KEY,  -- üóùÔ∏è PK
    nombre VARCHAR(100) NOT NULL,
    nacionalidad VARCHAR(50)
);

-- Entidad D√©bil: Libro (depende de Autor)
CREATE TABLE libros (
    id_libro INT AUTO_INCREMENT,
    id_autor INT NOT NULL,
    titulo VARCHAR(200) NOT NULL,
    isbn VARCHAR(17) UNIQUE,                 -- ü¶Ñ Atributo √∫nico
    PRIMARY KEY (id_libro, id_autor),        -- üóùÔ∏è PK compuesta
    FOREIGN KEY (id_autor) REFERENCES autores(id_autor) ON DELETE CASCADE
);

-- Entidad Fuerte: Usuario
CREATE TABLE usuarios (
    id_usuario INT PRIMARY KEY,
    nombre VARCHAR(100),
    dni VARCHAR(9) UNIQUE
);

-- Tabla intermedia para relaci√≥n N:M Usuario-Libro (Pr√©stamos)
CREATE TABLE prestamos (
    id_prestamo INT PRIMARY KEY,
    id_usuario INT,
    id_libro INT,
    fecha_prestamo DATE DEFAULT (CURRENT_DATE),
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario),
    FOREIGN KEY (id_libro) REFERENCES libros(id_libro)
);
```

## üí° **Consejos de Dise√±o**
1. **Identifica claramente** entidades fuertes y d√©biles  
2. **Normaliza** para evitar redundancias  
3. **Usa nombres descriptivos** (ej: `autores`, no `tabla1`)  
4. **Documenta** las relaciones entre entidades  




