# üìä **Cardinalidades en Bases de Datos Relacionales (MariaDB)**

## üåü **Concepto Fundamental**
Las **cardinalidades** definen c√≥mo se relacionan cuantitativamente las entidades. Son esenciales para el dise√±o de bases de datos relacionales.

**S√≠mbolo visual:**  
`(1) ‚Äî‚Äî‚Äî‚Äî (N)` (Uno a Muchos)  
`(N) ‚Äî‚Äî‚Äî‚Äî (M)` (Muchos a Muchos)

## üß© **Tipos de Cardinalidad**

### 1Ô∏è‚É£ **Uno a Uno (1:1)**
**Definici√≥n:**  
- Una ocurrencia de Entidad A se relaciona con **SOLO UNA** ocurrencia de Entidad B  
- Poco com√∫n (cuando la informaci√≥n podr√≠a estar en la misma tabla)

**Ejemplo en MariaDB:**
```sql
CREATE TABLE empleados (
    id INT PRIMARY KEY,
    nombre VARCHAR(100)
);

CREATE TABLE despachos (
    empleado_id INT PRIMARY KEY,  -- Misma PK que empleados
    numero VARCHAR(10),
    FOREIGN KEY (empleado_id) REFERENCES empleados(id)
);
```
*Cada empleado tiene exactamente un despacho asignado*

### 2Ô∏è‚É£ **Uno a Muchos (1:N)**
**Definici√≥n:**  
- Una ocurrencia de Entidad A se relaciona con **VARIAS** ocurrencias de Entidad B  
- El tipo de relaci√≥n **m√°s com√∫n**

**Ejemplo Pr√°ctico:**
```sql
CREATE TABLE departamentos (
    id INT PRIMARY KEY,
    nombre VARCHAR(50)
);

CREATE TABLE empleados (
    id INT PRIMARY KEY,
    nombre VARCHAR(100),
    departamento_id INT,
    FOREIGN KEY (departamento_id) REFERENCES departamentos(id)
);
```
*Un departamento tiene muchos empleados (1:N)*

### 3Ô∏è‚É£ **Muchos a Muchos (N:M)**
**Definici√≥n:**  
- Varias ocurrencias de Entidad A se relacionan con varias ocurrencias de Entidad B  
- Requiere **tabla puente/intermedia**

**Implementaci√≥n:**
```sql
CREATE TABLE estudiantes (
    id INT PRIMARY KEY,
    nombre VARCHAR(100)
);

CREATE TABLE cursos (
    id INT PRIMARY KEY,
    nombre VARCHAR(100)
);

-- Tabla puente para relaci√≥n N:M
CREATE TABLE matriculas (
    estudiante_id INT,
    curso_id INT,
    fecha DATE,
    PRIMARY KEY (estudiante_id, curso_id),
    FOREIGN KEY (estudiante_id) REFERENCES estudiantes(id),
    FOREIGN KEY (curso_id) REFERENCES cursos(id)
);
```
*Un estudiante puede tomar varios cursos y un curso tiene muchos estudiantes*

## üîç **Representaci√≥n Gr√°fica (Notaci√≥n Crow's Foot)**
| Cardinalidad | S√≠mbolo | Descripci√≥n |
|--------------|---------|-------------|
| **Uno (1)** | `|---` | L√≠nea simple |
| **Muchos (N)** | `|---<` | "Pata de cuervo" |
| **Cero o Uno (0..1)** | `|---o` | C√≠rculo |
| **Uno o Muchos (1..N)** | `|---<` | Pata de cuervo sin c√≠rculo |
| **Cero o Muchos (0..N)** | `|---o<` | C√≠rculo + pata |

## üõ†Ô∏è **C√≥mo Implementar en MariaDB**

### Para 1:1
```sql
-- Opci√≥n 1: Misma PK
CREATE TABLE perfil_usuarios (
    usuario_id INT PRIMARY KEY,
    biografia TEXT,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);

-- Opci√≥n 2: FK con UNIQUE
CREATE TABLE pasaportes (
    id INT PRIMARY KEY,
    numero VARCHAR(20) UNIQUE,
    usuario_id INT UNIQUE,  -- ¬°Asegura 1:1!
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id)
);
```

### Para 1:N
```sql
-- El caso m√°s simple (FK en tabla "muchos")
CREATE TABLE pedidos (
    id INT PRIMARY KEY,
    cliente_id INT,  -- Muchos pedidos pueden ser de 1 cliente
    fecha DATE,
    FOREIGN KEY (cliente_id) REFERENCES clientes(id)
);
```

### Para N:M
```sql
-- Tabla intermedia con PK compuesta
CREATE TABLE autores_libros (
    autor_id INT,
    libro_id INT,
    rol VARCHAR(50),
    PRIMARY KEY (autor_id, libro_id),
    FOREIGN KEY (autor_id) REFERENCES autores(id),
    FOREIGN KEY (libro_id) REFERENCES libros(id)
);
```

## üí° **Buenas Pr√°cticas**
1. **Nomenclatura clara**: Usar nombres que reflejen la relaci√≥n (`clientes_pedidos`, `estudiantes_cursos`)
2. **Integridad referencial**: Siempre definir FOREIGN KEYs
3. **Documentaci√≥n**: Comentar las relaciones complejas
4. **Rendimiento**: Indexar las columnas de relaci√≥n frecuentemente consultadas

## üìå **Ejemplo Completo: Sistema Hospitalario**
```sql
-- Entidades principales
CREATE TABLE medicos (
    id INT PRIMARY KEY,
    nombre VARCHAR(100),
    especialidad VARCHAR(50)
);

CREATE TABLE pacientes (
    id INT PRIMARY KEY,
    nombre VARCHAR(100),
    fecha_nacimiento DATE
);

-- Relaci√≥n N:M (m√©dicos-atenden-pacientes)
CREATE TABLE consultas (
    id INT PRIMARY KEY,
    medico_id INT,
    paciente_id INT,
    fecha_hora DATETIME,
    diagnostico TEXT,
    FOREIGN KEY (medico_id) REFERENCES medicos(id),
    FOREIGN KEY (paciente_id) REFERENCES pacientes(id)
);

-- Relaci√≥n 1:N (paciente-historial)
CREATE TABLE historial_medico (
    id INT PRIMARY KEY,
    paciente_id INT,  -- Un paciente tiene muchos registros
    fecha DATE,
    notas TEXT,
    FOREIGN KEY (paciente_id) REFERENCES pacientes(id)
);
```

## üîç **Casos Especiales**
### Cardinalidad Opcional (0..1)
```sql
CREATE TABLE empleados (
    id INT PRIMARY KEY,
    nombre VARCHAR(100)
);

CREATE TABLE coches_empresa (
    id INT PRIMARY KEY,
    modelo VARCHAR(50),
    empleado_id INT NULL,  -- ¬°Puede ser NULL!
    FOREIGN KEY (empleado_id) REFERENCES empleados(id)
);
```
*Algunos empleados tienen coche asignado (0..1)*
