**RESUMEN COMPLETO Y AMPLIADO SOBRE HTML** üåê

HTML, que significa HyperText Markup Language, es el lenguaje principal utilizado para estructurar el contenido en la web. A traves de etiquetas, permite definir la forma en que los navegadores muestran textos, imagenes, enlaces, formularios y otros elementos visuales. HTML no es un lenguaje de programacion, ya que no posee logica de control ni funciones, sino que se usa para marcar el contenido de forma jerarquica y estructurada.

---

**ORIGEN Y EVOLUCION DE HTML** üìú

HTML fue creado por Tim Berners-Lee en 1991 con el objetivo de compartir documentos a traves de Internet. En 1993, junto con Dan Connolly, se realizo la primera propuesta formal de especificacion del lenguaje. Desde 1996, el desarrollo y mantenimiento de HTML paso a manos del W3C, el consorcio internacional responsable de los estandares web.

Desde su creacion, HTML ha evolucionado significativamente. Las primeras versiones estaban centradas en el contenido y la presentacion mezcladas. Con HTML4 se promovio la separacion de contenido y estilo mediante CSS. Luego, HTML5 introdujo etiquetas semanticas, mejoras multimedia, soporte para nuevas APIs y una estructura mas limpia, eliminando muchas etiquetas visuales obsoletas.

---

**W3C Y SU FUNCION EN LA WEB** üõ†Ô∏è

El W3C (World Wide Web Consortium) fue fundado en 1994 por Tim Berners-Lee. Su mision es garantizar que la web funcione para todos, sin importar el dispositivo, la ubicacion o las capacidades del usuario. El W3C publica estandares y recomendaciones que aseguran la compatibilidad y accesibilidad del contenido web.

Objetivos del W3C:

* Hacer una web para todos los usuarios
* Garantizar acceso desde cualquier dispositivo
* Promover la colaboracion en linea
* Asegurar una web segura y confiable

Gracias al W3C, HTML se mantiene como un lenguaje solido y universal.

----

**DOCTYPE HTML Y MODO ESTANDAR** üìÑ

La primera linea de cualquier documento HTML debe ser:

`<!DOCTYPE html>`

Esta linea indica al navegador que el documento esta escrito en HTML5. Aunque no es una etiqueta, esta declaracion es esencial para que el navegador active el modo estandar y no use modos antiguos que podrian generar errores visuales o de comportamiento.

Si se omite o se escribe incorrectamente, el navegador puede activar el "modo quirks" o "modo compatibilidad", lo que puede causar que el dise√±o no se muestre correctamente, especialmente si se usan CSS o JavaScript.

---

**ESTRUCTURA BASICA DE UN DOCUMENTO HTML** üß±

Un documento HTML se compone de las siguientes secciones:

1. **DOCTYPE**: indica la version de HTML.
2. **Etiqueta <html>**: define el inicio y fin del documento.
3. **Seccion <head>**: contiene informacion como el titulo de la pagina, metadatos, enlaces a hojas de estilo y configuraciones de codificacion.
4. **Seccion <body>**: contiene todo el contenido visible de la pagina.

Dentro del head es fundamental incluir:

* `<meta charset="UTF-8">`: asegura que los caracteres se muestren correctamente.
* `<meta name="viewport" content="width=device-width, initial-scale=1.0">`: adapta la visualizacion a pantallas pequenas.

---

**ETIQUETAS COMUNES EN HTML** üî§

HTML utiliza etiquetas para identificar los distintos elementos de una pagina. Algunas de las mas importantes son:

* `<h1>` hasta `<h6>`: titulos de diferentes niveles jerarquicos.
* `<p>`: parrafos de texto.
* `<a href="...">`: enlaces a otras paginas o recursos.
* `<img src="..." alt="...">`: inserta imagenes.
* `<ul>`, `<ol>`, `<li>`: listas desordenadas, ordenadas y sus elementos.
* `<div>`: contenedor de bloques, usado para organizar secciones.
* `<span>`: contenedor en linea, usado para aplicar estilos a partes del texto.
* `<form>`, `<input>`, `<label>`, `<button>`: formularios y campos interactivos.

Estas etiquetas pueden tener atributos que modifican su comportamiento, como `class`, `id`, `href`, `src`, `type`, entre otros.

---

**ETIQUETAS SEMANTICAS EN HTML5** üß†

HTML5 introdujo etiquetas que no solo definen estructura, sino que explican el significado del contenido:

* `<header>`: encabezado de la pagina o seccion.
* `<nav>`: menu de navegacion.
* `<main>`: contenido principal de la pagina.
* `<section>`: secciones logicas de contenido.
* `<article>`: bloques independientes de contenido.
* `<aside>`: contenido secundario o complementario.
* `<footer>`: pie de pagina.

Estas etiquetas mejoran la accesibilidad, el SEO y la organizacion del documento.

---

**MULTIMEDIA EN HTML5** üé¨

HTML5 permite integrar contenido multimedia de forma nativa, sin necesidad de plugins externos:

* `<video src="..." controls>`: inserta un video.
* `<audio src="..." controls>`: inserta un audio.
* `<source>`: especifica varias fuentes multimedia para mejor compatibilidad.
* `<canvas>`: permite dibujar graficos mediante JavaScript.
* `<svg>`: define graficos vectoriales escalables.

Estas etiquetas son clave para experiencias web modernas e interactivas.

---

**ACCESIBILIDAD Y BUENAS PRACTICAS** ‚úÖ

Al usar HTML es importante seguir buenas practicas para asegurar que todos los usuarios puedan acceder al contenido:

* Usar etiquetas semanticas.
* Proveer texto alternativo en imagenes usando `alt`.
* Estructurar correctamente los titulos.
* Evitar mezclar estilo con contenido.
* Validar el codigo con herramientas del W3C.
* Usar etiquetas y atributos estandarizados.

Una buena estructura HTML facilita el trabajo con CSS y JavaScript, y mejora la experiencia del usuario final.

---

**CONCLUSION** üöÄ

HTML es el cimiento de la web moderna. Desde su creacion en 1991 hasta la version actual HTML5, ha evolucionado para ser mas accesible, flexible y semantico. Comprender y aplicar correctamente HTML es esencial para cualquier desarrollador web, ya que permite crear sitios organizados, compatibles y adaptables a diferentes dispositivos. Aprender HTML es el primer paso para dominar el mundo del desarrollo web.

---


üìò **ELEMENTOS HTML - RESUMEN DESARROLLADO**

HTML (HyperText Markup Language) es el lenguaje que usamos para estructurar el contenido de la web. Todo en una pagina web ‚Äî texto, imagenes, enlaces, formularios, botones, etc. ‚Äî se organiza a traves de **elementos HTML**.

Un **elemento HTML** esta formado por una etiqueta de apertura, contenido interno y una etiqueta de cierre. Algunos no tienen contenido ni etiqueta de cierre (elementos vacios).

Ejemplo basico:

```html
<p>Hola mundo</p>
```

üß± `<p>` es la etiqueta de apertura
üìÑ "Hola mundo" es el contenido
üîö `</p>` es la etiqueta de cierre

---

üîπ **TIPOS DE ELEMENTOS HTML**

üéØ **Elementos estructurales (organizan la pagina)**

* `<html>`: Elemento raiz del documento
* `<head>`: Contiene informacion como titulo, codificacion y enlaces a estilos
* `<body>`: Contiene todo el contenido visible de la pagina

üß† **Elementos semanticos (dan sentido al contenido)**

* `<header>`: Encabezado de pagina o seccion
* `<nav>`: Menu o barra de navegacion
* `<main>`: Contenido principal
* `<section>`: Seccion de contenido relacionado
* `<article>`: Publicacion o bloque independiente
* `<aside>`: Contenido lateral o complementario
* `<footer>`: Pie de pagina o seccion

üî° **Elementos de texto y contenido**

* `<h1>` a `<h6>`: Titulos jerarquicos (h1 es el mas importante)
* `<p>`: Parrafo
* `<span>`: Contenedor en linea sin semantica
* `<div>`: Contenedor en bloque sin semantica
* `<strong>`: Texto importante (negrita semantica)
* `<em>`: Enfasis (cursiva semantica)
* `<br>`: Salto de linea
* `<hr>`: Linea horizontal divisoria

üîó **Elementos de enlace e interaccion**

* `<a href="...">`: Enlace a otra pagina o recurso
* `<button>`: Boton interactivo
* `<form>`: Formulario
* `<input>`: Campo de entrada
* `<label>`: Etiqueta para campos de formulario
* `<textarea>`: Campo de texto grande
* `<select>` y `<option>`: Menus desplegables

üñº **Elementos multimedia**

* `<img src="..." alt="...">`: Imagen
* `<audio>` y `<video>`: Sonido y video incrustado
* `<source>`: Fuente alternativa para audio o video
* `<canvas>`: Dibujo con JavaScript
* `<svg>`: Graficos vectoriales

üßæ **Elementos de listas**

* `<ul>`: Lista desordenada
* `<ol>`: Lista ordenada
* `<li>`: Elemento de una lista

üß¨ **Elementos en la cabecera (`<head>`)**

* `<title>`: Titulo de la pagina
* `<meta charset="UTF-8">`: Codificacion del documento
* `<link>`: Enlace a archivos externos como CSS
* `<script>`: Codigo o enlace JavaScript
* `<style>`: Reglas CSS internas

---

‚úÖ **ELEMENTOS VACIOS**
Son elementos que no tienen contenido ni cierre, y se escriben solos:

* `<br>`: Salto de linea
* `<hr>`: Linea horizontal
* `<img>`: Imagen
* `<input>`: Campo de formulario

---

üîç **NOTAS FINALES**

* Todos los documentos HTML deben empezar con `<!DOCTYPE html>` para indicar que usan HTML5
* La estructura basica incluye `<html>`, `<head>` y `<body>`
* Es importante escribir correctamente las etiquetas para que el navegador interprete bien el contenido
* Los elementos deben anidarse correctamente (nesting), sin solapar cierres

---

Con el elemento script se puede vincular un fichero de JavaScript, indicando su URL en el atributo src.

<!DOCTYPE html> <!-- Pre√°mbulo -->
<html> <!-- Elemento Ra√≠z -->
  <head> <!-- Cabecera -->
    <title>Mi primera pagina web</title>
    <meta charset='UTF-8'>
    <meta name='author' content='Javier Carri√≥n'>
    <meta name='description' content='La pagina para realizar ejemplos'>
    <meta name='keywords' content='aje, aprender, curso, web, '>
    <link rel='stylesheet' type='text/css' href='hojaEstilo.css'>
    <script type='text/javascript' src='ficherojs.js'></script>
    <!-- Podemos incluir tambi√©n c√≥digo JavaScript directamente -->
    <script>alert('Hola')</script>
  </head>
  <body> <!-- Cuerpo -->
    Hola mundo ;)
  </body>
</html>

    El elemento <body> en HTML representa el cuerpo del documento, es decir, todo lo que el navegador muestra visualmente al usuario en la p√°gina web. Todo el contenido interactivo o visible como textos, im√°genes, botones, formularios, enlaces, listas, tablas, videos, entre otros, debe ir dentro de este elemento.

T√©cnicamente, el <body> es un hijo directo del elemento ra√≠z <html> y complementa al <head>, que contiene metadatos e informaci√≥n de configuraci√≥n. El contenido del <body> es interpretado y renderizado directamente por el navegador, mientras que el del <head> sirve para configurar c√≥mo se comporta o se ve esa p√°gina (por ejemplo, con estilos CSS o scripts JS).

En el ejemplo que diste, el contenido del <body> es simplemente el texto plano Hola mundo ;), lo que significa que al abrir esa p√°gina en un navegador, eso ser√° lo que ver√° el usuario en pantalla. Tambi√©n es importante mencionar que dentro del <body> pueden a√±adirse scripts de JavaScript (aunque por buenas pr√°cticas suele colocarse justo antes de cerrarlo), estilos inline y todo tipo de estructuras HTML que conforman el dise√±o y funcionalidad de la p√°gina.

	El elemento `<head>` en HTML representa la **cabecera del documento** y contiene informaci√≥n **meta** sobre la p√°gina, que no es visible directamente para el usuario pero es esencial para que el navegador, los motores de b√∫squeda y otros servicios entiendan y procesen correctamente el contenido.

Dentro del `<head>`, com√∫nmente se incluyen:

1. **`<title>`**: Define el t√≠tulo de la pesta√±a del navegador.
2. **`<meta charset="UTF-8">`**: Establece la codificaci√≥n de caracteres, importante para que se muestren correctamente acentos, √±, etc.
3. **`<meta name="author" content="...">`**: Indica el autor de la p√°gina.
4. **`<meta name="description" content="...">`**: Resume el contenido de la p√°gina, usado por buscadores como Google.
5. **`<meta name="keywords" content="...">`**: Lista de palabras clave, aunque hoy en d√≠a tiene poco peso en SEO.
6. **`<link rel="stylesheet" href="...">`**: Enlaza archivos CSS para definir el estilo visual de la p√°gina.
7. **`<script src="...">`**: Vincula archivos JavaScript para funcionalidad adicional.
8. **`<style>` y `<script>` inline**: Puedes incluir directamente c√≥digo CSS o JS dentro del head, aunque no es lo m√°s recomendable por temas de mantenimiento y rendimiento.

En resumen, el `<head>` configura el entorno de la p√°gina: define c√≥mo se debe ver, c√≥mo se comporta, y proporciona datos √∫tiles para buscadores, redes sociales y el navegador. Aunque no se "ve", es una parte crucial del documento HTML.


---

üìÑ **Formularios en HTML**

Un formulario en HTML se declara con la etiqueta `<form>`. Este elemento agrupa campos de entrada que permiten **recoger informaci√≥n del usuario** y enviarla al servidor. Dos atributos importantes en `<form>` son:

‚û°Ô∏è `action`: define la URL donde se enviar√°n los datos.
‚û°Ô∏è `method`: puede ser `"GET"` (env√≠a datos visibles en la URL) o `"POST"` (oculta los datos, m√°s seguro).

---

üìù **Campos de entrada (input)**

Se crean con la etiqueta `<input>` y pueden tener distintos tipos seg√∫n el dato que se quiera capturar. Algunos ejemplos de `type` son:

* `text`: para texto corto.
* `email`: valida correos.
* `password`: oculta el texto ingresado.
* `checkbox`: permite marcar una opci√≥n.
* `radio`: permite seleccionar una sola opci√≥n dentro de un grupo.
* `submit`: bot√≥n para enviar el formulario.

Cada `<input>` debe tener:

‚úÖ `name`: nombre del campo que se usar√° como clave al enviar los datos.
üîë `value`: valor que se enviar√° si ese campo est√° seleccionado o relleno.
üÜî `id`: identificador √∫nico para el elemento.
üîí `required`: obliga al usuario a rellenarlo antes de enviar.
üí° `placeholder`: texto de ejemplo que aparece dentro del campo.

---

üè∑Ô∏è **Label (etiquetas)**

Usamos `<label>` para conectar un texto con un input. Si usamos `for="idDelInput"`, al hacer clic en el texto tambi√©n se activa el campo. Ejemplo: un label con `for="correo"` debe tener un input con `id="correo"`.

---

üßæ **Textarea**

Para textos largos (comentarios, descripciones), se usa `<textarea>`. Puede tener atributos como `rows`, `cols`, `placeholder` y `name`.

---

üìã **Select y Option**

Para listas desplegables usamos `<select>`, y dentro colocamos opciones con `<option>`. Cada `option` tiene un `value` que ser√° el dato enviado si se elige esa opci√≥n.

---

üì¶ **Checkbox y Radio**

* Los `checkbox` permiten seleccionar **m√∫ltiples** opciones.
* Los `radio` permiten elegir **solo una** opci√≥n dentro de un grupo (deben tener el mismo `name` para agruparse).

Ambos se suelen envolver en `<label>` para mejor accesibilidad. Tambi√©n puedes usar un `value` personalizado para cada uno, as√≠ sabes exactamente qu√© seleccion√≥ el usuario.

---

üß± **Agrupaci√≥n con Fieldset y Legend**

Para organizar visualmente y sem√°nticamente un grupo de campos relacionados, se usa `<fieldset>`. Dentro se puede colocar un `<legend>` que sirve como t√≠tulo o descripci√≥n del grupo.

---

‚ö†Ô∏è **Validaciones HTML5**

El navegador puede validar autom√°ticamente si se usan estos atributos:

* `required`: obliga a rellenar.
* `min`, `max`: para n√∫meros y fechas.
* `pattern`: usa expresiones regulares para validar formatos.
* `maxlength`: limita la cantidad de caracteres.

---

üîò **¬øQu√© es un bot√≥n en HTML?**

Un bot√≥n sirve para **disparar acciones** en una p√°gina web. Pueden enviar formularios, resetear campos, ejecutar funciones de JavaScript o simplemente servir como elementos visuales interactivos. Se declaran con la etiqueta `<button>` o con `<input>`.

---

üöÄ **Tipos de botones**

Hay tres tipos principales:

üü¢ `type="submit"` ‚Üí Este env√≠a el formulario al servidor. Si no se especifica ning√∫n `type`, los botones dentro de un formulario lo asumen por defecto.

üîÅ `type="reset"` ‚Üí Este reinicia todos los campos del formulario a sus valores iniciales.

‚öôÔ∏è `type="button"` ‚Üí No hace nada por s√≠ solo, pero se usa con JavaScript para realizar acciones personalizadas como abrir una ventana, mostrar mensajes, etc.

---

‚úçÔ∏è **¬øC√≥mo se escriben?**

Con `<button>` puedes poner contenido dentro, como texto, √≠conos o etiquetas HTML. Ejemplo simple: `<button type="submit">Enviar üöÄ</button>`.
Tambi√©n existe la opci√≥n con `<input>`, que es m√°s limitada. Por ejemplo: `<input type="submit" value="Enviar">`. Este solo acepta texto plano en el atributo `value`, no contenido HTML.

---

üé® **Estilos y personalizaci√≥n**

Los botones se pueden estilizar con CSS usando propiedades como:

üé® `background-color` para el color de fondo
üé® `color` para el texto
üìê `padding` para el espacio interno
üñçÔ∏è `border` para los bordes
üñ±Ô∏è `cursor: pointer` para cambiar el cursor cuando se pasa el mouse

Tambi√©n se puede usar `:hover` para que cambie el estilo cuando el usuario pase el cursor por encima. Esto da un toque m√°s pro al dise√±o.

---

üì¥ **Botones deshabilitados**

Puedes usar el atributo `disabled` para desactivar un bot√≥n. Esto evita que se pueda hacer clic. Por ejemplo: `<button disabled>Enviar</button>`. Esto es √∫til cuando quieres evitar que se env√≠e un formulario hasta que se cumplan ciertas condiciones.

---

üí° **Consejos clave**

‚úîÔ∏è Usa `type="button"` si no quieres que el bot√≥n env√≠e el formulario por accidente.
‚úîÔ∏è Usa `submit` solo cuando de verdad quieras que el formulario se procese.
‚úîÔ∏è Usa `reset` si necesitas que el usuario pueda borrar todo r√°pido.
‚úîÔ∏è Siempre personaliza tus botones con CSS para que se vean bien y sean claros.
‚úîÔ∏è Comb√≠nalos con JavaScript si quieres funcionalidades avanzadas (como validaciones en tiempo real, alerts, mostrar/ocultar elementos, etc).

---

üìö **Resumen express**

Un bot√≥n en HTML puede ser un disparador visual de muchas acciones. Ya sea para enviar formularios (`submit`), reiniciar campos (`reset`), o ejecutar scripts (`button`), su comportamiento depende del atributo `type`. Siempre pon atenci√≥n a c√≥mo y d√≥nde lo usas, y si puedes, dale estilo con CSS y algo de inteligencia con JavaScript para una mejor experiencia de usuario.

---


üß† **Resumen r√°pido**

Los formularios recogen datos que luego se env√≠an al servidor. Cada input debe tener `name`, `type`, y opcionalmente `id`, `value`, y validaciones. Agrupa bien con `fieldset` y `label` para mejor estructura y accesibilidad. Usa `method="POST"` cuando trabajes con datos sensibles. Y no olvides que el backend debe validar todo de nuevo por seguridad üîê.

---



### üß± **HTML5 trae etiquetas sem√°nticas**

Antes todo era con `<div>` pa' todo üòÖ, pero ahora con HTML5 usamos etiquetas que **dicen qu√© son y qu√© hacen**, como:

* `<header>` üß¢ ‚Üí Encabezado de la p√°gina
* `<footer>` ü¶∂ ‚Üí Pie de p√°gina
* `<aside>` üóÇÔ∏è ‚Üí Contenido secundario o lateral
* `<section>` üì¶ ‚Üí Secci√≥n de contenido relacionada
* `<nav>` üß≠ ‚Üí Men√∫ de navegaci√≥n
* `<article>` üì∞ ‚Üí Contenido independiente como un post o noticia

---

### ‚ö†Ô∏è ¬øY el `div`?

Sigue existiendo, pero **solo lo usas cuando no hay una etiqueta sem√°ntica mejor**. Es el "comod√≠n", como un contenedor gen√©rico.

---

### üéØ ¬øC√≥mo les das estilo?

Con **CSS** üé®. Ah√≠ decides:

* üìè **Tama√±o**
* üìç **Posici√≥n**
* üé® **Colores, m√°rgenes, etc.**

---

### üß† ¬øPor qu√© mola esto?

* Es m√°s **claro** para ti, para otros devs y para los buscadores como Google ü§ìüîç
* Mejora la **accesibilidad** (lectores de pantalla entienden mejor la estructura).

---

